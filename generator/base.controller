package travelepsi.Controllers;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import travelepsi.Entities.{{%CAPSMODEL%}}Entity;
import travelepsi.Services.{{%CAPSMODEL%}}Service;


@RestController
@RequestMapping("/{{%LOWMODELPLUR%}}")
public class {{%CAPSMODEL%}}Controller {

    public {{%CAPSMODEL%}}Service {{%LOWMODEL%}}Service = new {{%CAPSMODEL%}}Service();

    @RequestMapping(method = RequestMethod.GET)
    public List<{{%CAPSMODEL%}}Entity> get{{%CAPSMODELPLUR%}}() {
        List<{{%CAPSMODEL%}}Entity> {{%LOWMODELPLUR%}} = {{%LOWMODEL%}}Service.getAll();
        return {{%LOWMODELPLUR%}};
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> get{{%CAPSMODEL%}}(@PathVariable Integer id) {
        {{%CAPSMODEL%}}Entity {{%LOWMODEL%}} = {{%LOWMODEL%}}Service.get(id);

        if ({{%LOWMODEL%}} == null) {
            return new ResponseEntity<String>("", HttpStatus.NOT_FOUND);
        }

        return new ResponseEntity<{{%CAPSMODEL%}}Entity>({{%LOWMODEL%}}, HttpStatus.CREATED);
    }

    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity<?> add{{%CAPSMODEL%}}(@RequestBody {{%CAPSMODEL%}}Entity {{%LOWMODEL%}}) {
        try {
            {{%LOWMODEL%}} = {{%LOWMODEL%}}Service.save({{%LOWMODEL%}});
        } catch (Exception e) {
            return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

        return new ResponseEntity<{{%CAPSMODEL%}}Entity>({{%LOWMODEL%}}, HttpStatus.CREATED);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> update{{%CAPSMODEL%}}(@PathVariable Integer id, @RequestBody {{%CAPSMODEL%}}Entity {{%LOWMODEL%}}) {
        {{%CAPSMODEL%}}Entity base = {{%LOWMODEL%}}Service.get(id);

        if ({{%LOWMODEL%}} == null) {
            return new ResponseEntity<String>("", HttpStatus.NOT_FOUND);
        }

        try {
            {{%LOWMODEL%}} = {{%LOWMODEL%}}Service.update(base.merge({{%LOWMODEL%}}));
        } catch (Exception e) {
            return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

        return new ResponseEntity<{{%CAPSMODEL%}}Entity>({{%LOWMODEL%}}, HttpStatus.OK);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<String> delete{{%CAPSMODEL%}}(@PathVariable Integer id) {
        {{%CAPSMODEL%}}Entity {{%LOWMODEL%}} = {{%LOWMODEL%}}Service.get(id);

        if ({{%LOWMODEL%}} == null) {
            return new ResponseEntity<String>("", HttpStatus.NOT_FOUND);
        }

        try {
            {{%LOWMODEL%}}Service.delete({{%LOWMODEL%}});
        } catch (Exception e) {
            return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

        return new ResponseEntity<String>("", HttpStatus.NO_CONTENT);
    }

}
